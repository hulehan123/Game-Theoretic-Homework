#################################################
# (B) 定义入侵者 & IDS的即时收益/成本函数
#################################################

# 对应论文中 \(\chi^1(w, s^1, s^2)\) 和 \(\chi^2(w, s^1, s^2)\)：
# (18)式与(19)式等说法，可根据论文中具体的计费、收益形式去修改。这里是示例。

from config import *

def attacker_payoff(w, a1, a2):
    """
    入侵者在状态 w 时, 选择 a1(0=低攻击,1=高攻击),
    而 IDS选择 a2(0=低扫描,1=高扫描) 时的即时收益(论文中的 \chi^1)。
    """
    # 可直接对照论文(18)式:
    #   \chi^1(w, s^1, s^2) = ...
    # 这里仅作示例性写法:
    if a1 == 1:
        base = C_H1   # 高攻击
    else:
        base = C_L1   # 低攻击

    # 假设当IDS高扫描时, 入侵者收益会被额外减少:
    if a2 == 1:
        base -= (C_H2 / 2.0)
    else:
        base += 0.5  # IDS低扫描, 入侵者可稍微获益

    # 也可以让收益跟 w 再挂钩(若 w 已经很大, 入侵者多半也获益?),可自行修改
    # 这里演示加上一点 c_w(w)*0.01
    payoff = base + 0.01 * c_w(w)

    return payoff


def ids_cost(w, a1, a2):
    """
    IDS在状态 w 时, 动作组合 (a1,a2) 下的即时成本 \chi^2(w, s^1, s^2).
    与论文(19)式对应, 也常带 c(w) + C^H_2 / C^L_2 等项.
    """
    # 先把 w 引起的风险/损失: c_w(w)
    cost = c_w(w)

    # 当 a2=1(高扫描)时, 多消耗资源
    if a2 == 1:
        cost += C_H2
    else:
        cost += C_L2

    # 如果入侵者在高攻击 a1=1，则可能让IDS额外负担
    if a1 == 1:
        cost += 2.0

    return cost
